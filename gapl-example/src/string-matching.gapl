interface char() wire[8]

interface string(parameter size: integer) char()[size]

interface boolean() wire

interface pair<I1, I2>() {
    first: I1;
    second: I2;
}

interface valid<I>() {
    value: I;
    valid: boolean();
}

interface last<I>() {
    value: I;
    last: boolean();
}

function string_matching_windowed<I>(
    parameter window_size: integer
) i: last<I>() => o: last<I[window_size]>() {
    declare windows: function register<I[window_size]>() => o.value;

    i.value => windows[window_size - 1];
    windows[1:window_size - 1] => windows[0:window_size - 2];

    i.last => o.last;
}

function string_matching_any() i: last<boolean()>() => o: valid<boolean()>() {
    declare current_value: function register<boolean()>();
    declare current_valid: function register<boolean()>();

    i.value, current_value
        => function or()
        => current_value
        => o.value;

    i.last, current_valid
        => function or()
        => current_valid
        => o.valid;
}

function string_matching_vector_fold<I>(
    parameter size: integer,
    parameter operation: function I, I => I
) i: last<I[size]>() => o: last<I>() {
    if (size == 1) {
        i.value[0] => o.value;
        i.last => o.last;
    } else if (size == 2) {
        i.value[0], i.value[1] => function operation => o.value;
        i.last => o.last;
    } else {
        declare delayed_fold: last<I[size - 1]>();

        i.value[size - 1], i.value[size - 2] => function operation => delayed_fold.value[size - 2];
        i.value[0:size - 3] => delayed_fold.value[0:size - 3];

        i.last => delayed_fold.last;

        delayed_fold
            => function register<last<I[size - 1]>()>()
            => function string_matching_vector_fold<I>(size - 1, function operation)
            => o;
    }
}

function string_matching_vector_zip<I>(
    parameter vector_size: integer,
) i: last<pair<I[vector_size], I[vector_size]>()>() => o: last<pair<I, I>()[vector_size]>() {
    i.value.first[0] => o.value[0].first;
    i.value.second[0] => o.value[0].second;

    i.last => o.last;

    if (vector_size > 1) {
        declare remainder_unzipped: last<pair<I[vector_size - 1], I[vector_size - 1]>()>();
        declare remainder_zipped: last<pair<I, I>()[vector_size - 1]>();

        i.value.first[1:vector_size - 1] => remainder_unzipped.value.first;
        i.value.second[1:vector_size - 1] => remainder_unzipped.value.second;
        i.last => remainder_unzipped.last;

        remainder_unzipped => function string_matching_vector_zip<I>(vector_size - 1) => remainder_zipped;

        remainder_zipped.value => o.value[1:vector_size - 1];
    }
}

function string_matching_vector_map<I, O>(
    parameter size: integer,
    parameter operation: function I => O,
) i: last<I[size]>() => o: last<O[size]>() {
    if (size > 0) {
        i.value[size - 1] => function operation => o.value[size - 1];
        i.last => o.last;

        if (size > 1) {
            declare remainder_unmapped: last<I[size - 1]>();
            declare remainder_mapped: last<O[size - 1]>();

            i.value[0:size - 2] => remainder_unmapped.value;
            i.last => remainder_unmapped.last;

            remainder_unmapped => function string_matching_vector_map<I, O>(size - 1, function operation) => remainder_mapped;

            remainder_mapped.value => o.value[0:size - 2];
        }
    }
}

function string_matching_char_pair_equals() i: pair<char(), char()>() => result: boolean() {
    i.first, i.second => function equals(8) => declare is_equal: boolean();
    i.first, function literal(8, 0) => function not_equals(8) => declare non_null: boolean();
    is_equal, non_null => function and() => result;
}

function string_matching_string_equals(
    parameter string_size: integer
) strings: last<pair<string(string_size), string(string_size)>()>() => result: valid<boolean()>() {
    strings
        => function string_matching_vector_zip<char()>(string_size)
        => function string_matching_vector_map<pair<char(), char()>(), boolean()>(string_size, function string_matching_char_pair_equals())
        => function string_matching_vector_fold<boolean()>(string_size, function and())
        => result;
}

function string_matching(
    parameter needle_size: integer
) needle: string(needle_size), heystack: last<char()>() => result: valid<boolean()>() {
    heystack
        => function string_matching_windowed<char()>(needle_size)
        => declare candidate: last<string(needle_size)>();

    declare needle_candidate_pair: last<pair<string(needle_size), string(needle_size)>()>();

    needle => needle_candidate_pair.value.first;
    candidate.value => needle_candidate_pair.value.second;
    candidate.last => needle_candidate_pair.last;

    needle_candidate_pair
        => function string_matching_string_equals(needle_size)
        => function string_matching_any()
        => result;
}

function string_matching_main() needle: string(5), heystack: char(), last: boolean() => result: boolean(), valid: boolean() {
    declare heystack_last: last<char()>();

    heystack => heystack_last.value;
    last => heystack_last.last;

    declare result_valid: valid<boolean()>();

    needle, heystack_last => function string_matching(5) => result_valid;

    result_valid.value => result;
    result_valid.valid => valid;
}
