interface byte() wire[8]
interface word() byte()[4]

function repeat<T, T>(parameter repeat_factor: integer, parameter operation: function T => T) i: T => o: T {
    if (repeat_factor == 1) {
        i => function operation => o;
    } else {
        i => function operation
            => function repeat<T, T>(size - 1, function operation)
            => o;
    }
}

function substitute_byte() i: byte() => o: byte() {
    // Tedious
}

function substitute_word() i: word() => o: word() {
    i => vector_map<byte(), byte()>(4, function substitute_byte()) => o;
}

function rotate_once<T>(parameter size: integer) i: T[size] => o: T[size] {
    i[0] => o[size - 1];
    i[1:size - 1] => o[0:size - 2];
}

function rotate<T>(parameter size: integer, parameter rotate_count: integer) i: T[size] => o: T[size] {
    i => repeat<T, T>(rotate_count, function rotate_once<T>(size)) => o;
}

function round_constant() i: wire[4] => o: wire[32] {
    // Tedious
}